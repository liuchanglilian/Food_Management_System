/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.RestaurantManagerRole;

import Food.FoodServe;
import Network.Network;
import business.Enterprise.DeliveryCompany;
import business.Enterprise.Enterprise;
import business.Enterprise.Restaurant;
import business.Organization.DeliveryMenOrganization;
import business.Organization.Organization;
import business.WorkQueue.OrphaneRequest;
import business.WorkQueue.WorkRequest;
import business.business.EcoSystem;
import java.awt.CardLayout;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Wen
 */
public class ManageRequestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageRequestJPanel
     */
    private EcoSystem system;
    private Restaurant restaurant;
    private JPanel userProcessContainer;
    private Network network;
    private int discountNumber;
    private ObjectOutputStream streamOut;

    public ManageRequestJPanel(EcoSystem system, Enterprise enterprise, Network network, JPanel userProcessContainer, ObjectOutputStream streamOut) {
        initComponents();
        this.system = system;
        this.userProcessContainer = userProcessContainer;
        this.restaurant = (Restaurant) enterprise;
        this.network = network;
        this.streamOut = streamOut;
        this.discountNumber = getDiscount();
        setDiscountText();
        populateTable();
    }

    public void setDiscountText() {
        jTextField1.setText(String.valueOf(discountNumber));

    }

    public int getDiscount() {
        int a = 0;
        for (FoodServe s : restaurant.getUnfreshfoodList()) {
            a = a + s.getNumber();
        }
        return a;
    }

    public void populateTable() {
        ArrayList<WorkRequest> requestList = network.getQueueOphan().getWorkRequestList();
        DefaultTableModel model = (DefaultTableModel) tblRequest.getModel();
        model.setRowCount(0);

        for (WorkRequest r : requestList) {
            OrphaneRequest o = (OrphaneRequest) r;
            Object[] row = new Object[4];
            row[0] = r;
            row[1] = r.getSender();
            row[2] = r.getStatus();
            row[3] = o.getNumberOfFood();
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRequest = new javax.swing.JTable();
        btnApprove = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Manage Request ");

        tblRequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Sender", "Status", "NumberOfFood"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblRequest);
        if (tblRequest.getColumnModel().getColumnCount() > 0) {
            tblRequest.getColumnModel().getColumn(0).setResizable(false);
            tblRequest.getColumnModel().getColumn(1).setResizable(false);
            tblRequest.getColumnModel().getColumn(2).setResizable(false);
        }

        btnApprove.setText("Select and Approve");
        btnApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel2.setText("My discount food number:");

        jTextField1.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnApprove))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(371, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnApprove)
                    .addComponent(btnBack))
                .addContainerGap(61, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveActionPerformed
        // TODO add your handling code here:

        // TODO add your handling code here:
        int selected = tblRequest.getSelectedRow();
        if (selected < 0) {
            JOptionPane.showMessageDialog(null, "Please Select a Row");
        } else {

            OrphaneRequest r = (OrphaneRequest) tblRequest.getValueAt(selected, 0);

            if (!r.getStatus().equals("Send to restaurant")) {
                JOptionPane.showMessageDialog(null, "Operation already made,Please be patient ^-^");
                return;
            }

            if (r.getNumberOfFood() > discountNumber) {
                JOptionPane.showMessageDialog(null, "You don't have enough discount food");
                return;
            } else {
                DeliveryCompany delivery = null;
                for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
                    if (e instanceof DeliveryCompany) {
                        delivery = (DeliveryCompany) e;
                        break;
                    }

                }
                if (delivery == null) {
                    JOptionPane.showMessageDialog(null, "No available delivery company in this area!", "Warning", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                boolean findAnDeliveryOrganization = false;
                for (Organization o : delivery.getOrganizationDirectory().getOrganizationList()) {
                    if (o instanceof DeliveryMenOrganization) {
                        ((DeliveryMenOrganization) o).getWorkQueue().getWorkRequestList().add(r);
                        findAnDeliveryOrganization = true;
                        r.setStatus("Waiting for delivery Man");
                        network.getQueueOphan().getWorkRequestList().remove(r);
                        break;
                    }
                }
                if (findAnDeliveryOrganization == false) {
                    JOptionPane.showMessageDialog(null, "No available organization in this company!", "Warning", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                JOptionPane.showMessageDialog(null, "Requested send out to Delivery Company");
                r.setStatus("Waiting for delivery Man");
                r.setEnterprise(restaurant);
                int number = r.getNumberOfFood();
                for (FoodServe fs : restaurant.getUnfreshfoodList()) {
                    int a = fs.getNumber();
                    if (a > number) {
                        int remain = a - number;
                        fs.setNumber(remain);
                        break;
                    } else {
                        number = number - fs.getNumber();
                        fs.setNumber(0);
                    }
                }
                discountNumber = discountNumber - r.getNumberOfFood();
                try {
                    streamOut.reset();
                    streamOut.writeObject(system);
                    streamOut.flush();
                } catch (Exception e) {
                    System.out.println("Error:" + e.getMessage());
                }
            }
        }

        populateTable();
        getDiscount();
        setDiscountText();


    }//GEN-LAST:event_btnApproveActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApprove;
    private javax.swing.JButton btnBack;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTable tblRequest;
    // End of variables declaration//GEN-END:variables
}
