/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.SuperMarketManager;

import SuperMarketItem.SuperMarketItem;
import business.Enterprise.Restaurant;
import business.Enterprise.SuperMarket;
import business.business.EcoSystem;
import java.awt.CardLayout;
import java.awt.Image;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import picutill.OnlineDish;
import picutill.PicUtil;

/**
 *
 * @author liuch
 */
public class ManageRawFoodListJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageRawFoodListJPanel
     */
    private EcoSystem system;
    private SuperMarket superMarket;
    private JPanel userProcessContainer;
    private Connection con;

    public ManageRawFoodListJPanel(EcoSystem system, SuperMarket superMarket, JPanel userProcessContainer) {
        initComponents();
        this.system = system;
        this.superMarket = superMarket;
        this.userProcessContainer = userProcessContainer;
        populateTable();
    }

    public ArrayList<SuperMarketItem> superMarketItemList() {
        ArrayList<SuperMarketItem> list = new ArrayList<>();
        try {
            /* Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            String url = "jdbc:sqlserver://35.185.14.219:3306;databaseName=new_schema;user=root;password=8466";
            Connection con = DriverManager.getConnection(url);*/
            String DB_URL = "jdbc:mysql://35.185.14.219:3306/new_schema";
            String DB_DRV = "com.mysql.jdbc.Driver";
            String DB_USER = "root";
            String DB_PASSWD = "8466";
            con = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWD);
            String query1 = "SELECT * FROM new_schema.`" + superMarket.getUserAccount().getUsername() + "`";
            Statement st = (Statement) con.createStatement();
            ResultSet rs = st.executeQuery(query1);
            SuperMarketItem item;
            while (rs.next()) {
                item = new SuperMarketItem(rs.getInt("id"), rs.getString("Name"), rs.getInt("calorie"), rs.getDouble("Price"), rs.getBytes("pic"), rs.getDouble("discount"), rs.getInt("inventory"), rs.getInt("saleHistory"));
                list.add(item);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return list;
    }

    public void populateTable() {
        /*  DefaultTableModel model = (DefaultTableModel) tblManu.getModel();
     model.setRowCount(0);
     for (RestaurantDish rd :restaurant.getMenu().getMenuList()){
            Object[] row = new Object[2];
            row[0] = rd;
            row[1] = rd.getPrice();
            model.addRow(row);
        }
         */
        ArrayList<SuperMarketItem> list = superMarketItemList();
        // jTable1.getColumnModel().getColumn(2).setCellRenderer(jTable1.getDefaultRenderer(ImageIcon.class));
        DefaultTableModel model = (DefaultTableModel) tblManu.getModel();
        model.setRowCount(0);
        //if(list.size()>1)

        // jLabel4.setIcon(new ImageIcon(list.get(1).getPic()));
        /* {ImageIcon a = new ImageIcon(list.get(1).getPic());
        Image image = a.getImage();
        double h = 100.0/a.getIconHeight();
        Image newimg = image.getScaledInstance((int)(a.getIconWidth()*h), (int)(a.getIconHeight()*h),java.awt.Image.SCALE_SMOOTH);
        ImageIcon newone= new ImageIcon(newimg);
        jLabel4.setIcon(newone);
       }*/
        Object[] row = new Object[6];
        for (int i = 0; i < list.size(); i++) {
            row[0] = list.get(i).getId();
            row[1] = list.get(i);
            row[2] = list.get(i).getCalorie();
            row[3] = list.get(i).getPrice();
            row[4] = list.get(i).getDiscount();
            row[5] = list.get(i).getInventory();
            //   row[2] = new ImageIcon(list.get(i).getPic());
            // row[2] = new ImageIcon([B@72d5d89e);
            //System.out.println("after read"+list.get(i).getPic());
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblManu = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtDishName = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtCalorie = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtInventory = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnDelete.setText("Select and Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Manage Fruit and Vegitable List");

        jLabel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblManu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Name", "Calorie", "Price", "Discount Level", "Inventory"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblManu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblManuMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblManu);

        jLabel5.setText("Load Photo Here");
        jLabel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });

        jLabel1.setText("Name:");

        jLabel2.setText("Price:");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        jLabel6.setText("Calorie:");

        jLabel7.setText("Load Inventory:");

        jButton1.setText("Load");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBack)
                                .addGap(143, 143, 143)
                                .addComponent(btnAdd))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(66, 66, 66)
                                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel2)
                            .addComponent(btnDelete)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtInventory)
                            .addComponent(jButton1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(txtDishName, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCalorie, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(27, 27, 27)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addComponent(btnDelete))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(txtInventory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(txtDishName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtCalorie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(btnAdd))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(btnBack)))
                .addContainerGap(258, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
        // TODO add your handling code here:
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed

          int row = tblManu.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(null, "Pls select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else{
            SuperMarketItem p = (SuperMarketItem)tblManu.getValueAt(row, 1);
            String query1 ="DELETE FROM `new_schema`.`"+ superMarket.getUserAccount().getUsername()+"` WHERE `id`='"+p.getId()+"';";
             Statement st;
        try {
            st = (Statement)con.createStatement();
            st.executeUpdate(query1);
            populateTable();
            JOptionPane.showMessageDialog(null,"Manu deleted");
            
            
        } catch (SQLException ex) {
            Logger.getLogger(ManageDiscountJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
            
            
        }
           /* restaurant.getMenu().getMenuList().remove(p);
            JOptionPane.showMessageDialog(null, "Delete Succeed", "Warning", JOptionPane.WARNING_MESSAGE);
            populateTable();
        }
         */
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tblManuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblManuMouseClicked
        int i = tblManu.getSelectedRow();
        //new ImageIcon(list.get(i).getPic());
        ImageIcon image1 = new ImageIcon(((SuperMarketItem) tblManu.getValueAt(i, 1)).getPic());
        //(ImageIcon)jTable1.getValueAt(i,2);
        Image image = image1.getImage();
        double h = 100.0 / image1.getIconHeight();
        Image newimg = image.getScaledInstance((int) (image1.getIconWidth() * h), (int) (image1.getIconHeight() * h), java.awt.Image.SCALE_SMOOTH);
        ImageIcon newone = new ImageIcon(newimg);
        jLabel4.setIcon(newone);        // TODO add your handling code here:
    }//GEN-LAST:event_tblManuMouseClicked

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        jLabel5.setIcon(PicUtil.getImage()); // TODO add your handling code here:
    }//GEN-LAST:event_jLabel5MouseClicked

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        /*        String dishName = txtDishName.getText();
        double price = Double.parseDouble(txtPrice.getText());
        restaurant.addMenu(dishName,price);
        populateTable();
         */
        String name = null;
        int calorie = 0;
        double price = 0;
        byte[] pic = null;
      
            name = txtDishName.getText();
            String ca=txtCalorie.getText();
           String pr = txtPrice.getText();
           if((name.equals(""))||(ca.equals(""))||(pr.equals("")))
           {
               JOptionPane.showMessageDialog(null,"Invalid input");
               return;
           }
            try
            {calorie = Integer.parseInt(ca);
            price = Double.parseDouble(pr);
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null,"Invalid input for numbers");
                return;
            }
            try
            {pic = PicUtil.readImage();
            
            }catch(Exception e){
                JOptionPane.showMessageDialog(null, "Invalid photo");
                return;
            }
        
        //String query = "INSERT INTO new_schema.Pic ('Name','pic') VALUES (?,?)";
        String query = "INSERT INTO `new_schema`.`" + superMarket.getUserAccount().getUsername() + "`  (`Name`,`calorie`,`Price`,`pic`) VALUES (?,?,?,?)";
        PreparedStatement pstmt;
        try {
            pstmt = (PreparedStatement) con.prepareStatement(query);
            //pstmt.setInt(1, id);
            pstmt.setString(1, name);
            pstmt.setDouble(2, calorie);
            pstmt.setDouble(3, price);
            pstmt.setBytes(4, pic);
            pstmt.execute();
            JOptionPane.showMessageDialog(null, "Uploaded");
            populateTable();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
            System.out.println(ex);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int inventory = 0;
        try {
            inventory = Integer.parseInt(txtInventory.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please input invalid number");
            return;
        }
        if (inventory > 0) {
            int selectedRow = tblManu.getSelectedRow();
            if (selectedRow < 0) {
                JOptionPane.showMessageDialog(null, "Please select");
                return;
            }
            //RestaurantDish selectedDish = (RestaurantDish)jTable1.getValueAt(selectedRow,0);
            int selectedID = (int) tblManu.getValueAt(selectedRow, 0);
            int currentNumber= (int) tblManu.getValueAt(selectedRow, 5);
            int total = currentNumber+inventory;
            String query1 = "UPDATE `new_schema`.`"+superMarket.getUserAccount().getUsername()+"` SET `inventory`='"+total+"' WHERE `id`='"+selectedID +"';";
            Statement st;
        try {
            st = (Statement)con.createStatement();
            st.executeUpdate(query1);
            JOptionPane.showMessageDialog(null,"Discount updated");
            populateTable();
            
        } catch (SQLException ex) {
            Logger.getLogger(ManageDiscountJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblManu;
    private javax.swing.JTextField txtCalorie;
    private javax.swing.JTextField txtDishName;
    private javax.swing.JTextField txtInventory;
    private javax.swing.JTextField txtPrice;
    // End of variables declaration//GEN-END:variables
}
