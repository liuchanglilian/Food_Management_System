/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.SuperMarketManager;

import Network.Network;
import SuperMarketItem.SuperMarketServe;
import business.Enterprise.DeliveryCompany;
import business.Enterprise.Enterprise;
import business.Enterprise.SuperMarket;
import business.Organization.DeliveryMenOrganization;
import business.Organization.Organization;
import business.UserAccount.UserAccount;
import business.WorkQueue.FoodOrderRequest;
import business.WorkQueue.SuperMarketOrderRequest;
import business.WorkQueue.WorkRequest;
import business.business.EcoSystem;
import java.awt.CardLayout;
import java.io.ObjectOutputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author liuch
 */
public class SuperMarketOrdersJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SuperMarketOrdersJPanel
     */
    UserAccount account;
    Network network;
    EcoSystem system;
    SuperMarket superMarket;
    JPanel userProcessContainer;
    Connection con;
     ObjectOutputStream streamOut;
     public SuperMarketOrdersJPanel(UserAccount account,Network network,EcoSystem system,SuperMarket superMarket,JPanel userProcessContainer, ObjectOutputStream streamOut) {
        initComponents();
        this.account = account;
        this.network = network;
        this.system = system;
        this.superMarket = superMarket;
        this.streamOut = streamOut;
        this.userProcessContainer = userProcessContainer;
        populateTable();
        makeConnect();
    }
     
      public void populateTable()
{
     DefaultTableModel model = (DefaultTableModel) tblOrder1.getModel();
     model.setRowCount(0);
     for (WorkRequest workRequest:superMarket.getFoodOrderqueue().getWorkRequestList()){
            workRequest = (SuperMarketOrderRequest) workRequest;
            Object[] row = new Object[3];
            row[0] = workRequest;
            row[1] = workRequest.getAddress();
            row[2] = workRequest.getStatus();
            model.addRow(row);
        }
}

     public void populateViewTable(SuperMarketOrderRequest p)
{
    DefaultTableModel model = (DefaultTableModel) tblOrder.getModel();
     model.setRowCount(0);
     for (SuperMarketServe sms:p.getItemList()){
            Object[] row = new Object[3];
            row[0] = sms.getItem().getId();
            row[1] =sms;
            row[2] = sms.getNumber();
            model.addRow(row);
        }
     
}
    
    
     

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOrder1 = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnApprove = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblOrder = new javax.swing.JTable();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Manage Orders");

        tblOrder1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "OderNumber", "Customer Address", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblOrder1);

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnView.setText("Select and View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnApprove.setText("Approve");
        btnApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveActionPerformed(evt);
            }
        });

        tblOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ItemID", "Name", "Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblOrder);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(btnBack)
                        .addGap(255, 255, 255)
                        .addComponent(btnApprove))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(btnView))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(371, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel1)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnView)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnApprove))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
        // TODO add your handling code here:
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
     
        int row =tblOrder1.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(null, "Pls select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else{
        SuperMarketOrderRequest p = (SuperMarketOrderRequest)tblOrder1.getValueAt(row, 0);
       populateViewTable(p);


        } // TODO add your handling code here:
       // TODO add your handling code here:
    }//GEN-LAST:event_btnViewActionPerformed

    public void makeConnect()
    {
         try{    String DB_URL = "jdbc:mysql://35.185.14.219:3306/new_schema";
             String DB_DRV =  "com.mysql.jdbc.Driver";
             String DB_USER = "root";
            String DB_PASSWD = "8466";
            con=DriverManager.getConnection (DB_URL,DB_USER,DB_PASSWD);
         }catch(Exception ex){
             JOptionPane.showMessageDialog(null, ex);
         }
    }
    private void btnApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveActionPerformed
        int row =tblOrder1.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(null, "Pls select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else{
            SuperMarketOrderRequest p = (SuperMarketOrderRequest)tblOrder1.getValueAt(row, 0);
            if(p.getStatus().equals("Waiting for delivery Man"))
            {
                JOptionPane.showMessageDialog(null,"Already send request to Delivery Company,Please be patient ^-^");
                return;
            }
            p.setStatus("Accepted");
            for(SuperMarketServe marketServe: p.getItemList())
            {
            int id = marketServe.getItem().getId();
            int num = marketServe.getNumber();
            String query1 = "UPDATE `new_schema`.`"+superMarket.getUserAccount().getUsername()+"` SET `inventory`=`inventory` - "+num+"   WHERE `id`='"+id+"';";
            Statement st;
           try {
               st = (Statement)con.createStatement();
               st.executeUpdate(query1);
               JOptionPane.showMessageDialog(null,"Inventory updated");
               populateTable();
            
        } catch (SQLException ex) {
            Logger.getLogger(ManageDiscountJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
            }
           
            DeliveryCompany delivery =null;
            for(Enterprise e:network.getEnterpriseDirectory().getEnterpriseList())
            {
                if(e instanceof DeliveryCompany)
                { delivery = (DeliveryCompany)e;
                    break;
                }

            }
            if(delivery == null){
                JOptionPane.showMessageDialog(null, "No available delivery company in this area!", "Warning", JOptionPane.WARNING_MESSAGE);
                try{
                     streamOut.reset();
                    streamOut.writeObject(system);
                   streamOut.flush();
                }catch(Exception e){
                    System.out.println("Error:"+e.getMessage());
                }
                return;
            }
            boolean findAnDeliveryOrganization = false;
            for(Organization o:delivery.getOrganizationDirectory().getOrganizationList())
            {
                if(o instanceof DeliveryMenOrganization)
                {  ((DeliveryMenOrganization) o).getWorkQueue().getWorkRequestList().add(p);
                    findAnDeliveryOrganization=true;
                    p.setStatus("Waiting for delivery Man");
                    break;
                }
            }
            if(findAnDeliveryOrganization==false)
            {
                JOptionPane.showMessageDialog(null, "No available organization in this company!", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
             try{
                  streamOut.reset();
                    streamOut.writeObject(system);
                   streamOut.flush();
                }catch(Exception e){
                    System.out.println("Error:"+e.getMessage());
                }
            JOptionPane.showMessageDialog(null,"Requested send out to Delivery Company");
            populateTable();
        }// TODO add your handling code here:
    }//GEN-LAST:event_btnApproveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApprove;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnView;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblOrder;
    private javax.swing.JTable tblOrder1;
    // End of variables declaration//GEN-END:variables
}
